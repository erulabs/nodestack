var forever = require('forever');

var child = new(forever.Monitor)('<%= @app_dir %>/current/<%= @entry_point %>', {
	append: true,
	silent: false,
	cwd: '<%= @app_dir %>/current/',
	options: [<% @app_options.each do | option | %>'<%= option %>', <% end %>],
        pidFile: '<%= @app_dir %>/pids/app.pid',
        watch: true,
        watchDirectory: '<%= @app_dir %>/current',      // Top-level directory to watch from.
        watchIgnoreDotFiles: true, // whether to ignore dot files
        watchIgnorePatterns: [<% @ignore_patterns.each do | pattern | %>'<%= pattern %>', <% end %>], // array of glob patterns to ignore, merged with contents of watchDirectory + '/.foreverignore' file
        logFile: '<%= @app_dir %>/logs/forever.log', // Path to log output from forever process (when daemonized)
        outFile: '<%= @app_dir %>/logs/forever.out', // Path to log output from child stdout
        errFile: '<%= @app_dir %>/logs/forever.err'
});

child.on('watch:restart', function(info) {
        console.error('Restaring script because ' + info.file + ' changed');
});

child.on('restart', function() {
        console.error('Forever restarting script for ' + child.times + ' time');
});

child.on('exit:code', function(code) {
        console.error('Forever detected script exited with code ' + code);
});

var pid = child.start().child.pid;

process.on('SIGTERM', function () {
        console.error('Sending kill signals to ' + pid);
        process.kill(pid, 'SIGTERM');
        process.exit();
});
